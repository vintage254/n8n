"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WhatsAbleNotifyerApi_credentials_1 = require("../../credentials/WhatsAbleNotifyerApi.credentials");
describe('WhatsAbleNotifyerApi Credentials', () => {
    let credentials;
    beforeAll(() => {
        credentials = new WhatsAbleNotifyerApi_credentials_1.WhatsAbleNotifyerApi();
    });
    test('should have the correct name', () => {
        expect(credentials.name).toBe('whatsAbleNotifyerApi');
    });
    test('should have the correct display name', () => {
        expect(credentials.displayName).toBe('WhatsAble Notifyer System Trigger API');
    });
    test('should have the correct documentation URL', () => {
        expect(credentials.documentationUrl).toBe('https://docs.whatsable.app/n8n-overview');
    });
    test('should have required properties', () => {
        expect(credentials.properties).toHaveLength(2);
        const apiKeyProperty = credentials.properties[0];
        expect(apiKeyProperty.name).toBe('apiKey');
        expect(apiKeyProperty.type).toBe('string');
        expect(apiKeyProperty.displayName).toBe('API Key');
        expect(apiKeyProperty.typeOptions).toEqual({ password: true });
        expect(apiKeyProperty.required).toBe(true);
        expect(apiKeyProperty.description).toBe('API Key for WhatsAble');
        const webhookProperty = credentials.properties[1];
        expect(webhookProperty.name).toBe('productionWebhookUrl');
        expect(webhookProperty.type).toBe('string');
        expect(webhookProperty.displayName).toBe('Webhook URL');
        expect(webhookProperty.required).toBe(true);
        expect(webhookProperty.description).toBe('Enter your webhook URL for testing. In production, this will be automatically determined.');
    });
    test('should have correct authentication method', () => {
        expect(credentials.authenticate).toBeDefined();
        expect(credentials.authenticate.type).toBe('generic');
        const auth = credentials.authenticate;
        expect(auth.properties).toBeDefined();
        if (auth.properties && auth.properties.headers) {
            expect(auth.properties.headers).toHaveProperty('Authorization');
            expect(auth.properties.headers.Authorization).toBe('={{$credentials.apiKey}}');
        }
        else {
            throw new Error('Authentication properties or headers property is missing');
        }
    });
    test('should have correct test configuration', () => {
        expect(credentials.test).toBeDefined();
        const test = credentials.test;
        expect(test.request).toBeDefined();
        expect(test.request.method).toBe('POST');
        expect(test.request.url).toBe('/n8n');
        expect(test.request.body).toEqual({
            hookUrl: '={{$credentials.productionWebhookUrl}}'
        });
        expect(test.request.headers).toEqual({
            'Content-Type': 'application/json'
        });
        expect(test.request.baseURL).toContain('/api:dBShrB6H');
    });
});
//# sourceMappingURL=WhatsAbleNotifyerApi.test.js.map