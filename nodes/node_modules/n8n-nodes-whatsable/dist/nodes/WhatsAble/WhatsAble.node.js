"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WhatsAble = void 0;
exports.getTemplateVariables = getTemplateVariables;
const n8n_workflow_1 = require("n8n-workflow");
const timezones_1 = require("./timezones");
const constants_1 = require("../../shared/constants");
const BASE_URLS = {
    VALIDATION: `${constants_1.BASE_DOMAIN}/api:gncnl2D6`,
    NOTIFIER: `${constants_1.BASE_DOMAIN}/api:gncnl2D6`,
    NOTIFYER: `${constants_1.BASE_DOMAIN}/api:ErOQ8pSj`,
    WHATSABLE: `${constants_1.BASE_DOMAIN}/api:gncnl2D6`,
};
class WhatsAble {
    constructor() {
        this.description = {
            displayName: 'WhatsAble',
            name: 'whatsAble',
            icon: 'file:whatsable.svg',
            group: ['output'],
            version: 1,
            subtitle: '={{$parameter["operation"] || "Configure WhatsApp messaging"}}',
            description: 'Automate WhatsApp messages',
            defaults: {
                name: 'WhatsAble',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'whatsAbleApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        {
                            name: 'Send Message',
                            value: 'sendMessage',
                        },
                    ],
                    default: 'sendMessage',
                    required: true,
                },
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    noDataExpression: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                        },
                    },
                    options: [
                        {
                            name: 'Send Message Via Whatsable',
                            value: 'sendWhatsableMessage',
                            description: 'Send WhatsApp messages via WhatsAble platform',
                            action: 'Send message via whatsable',
                        },
                        {
                            name: 'Send Message Via Notifier',
                            value: 'sendMessage',
                            description: 'Send WhatsApp messages with optional attachments',
                            action: 'Send message via notifier',
                        },
                        {
                            name: 'Send Template Via Notifyer',
                            value: 'sendNotifyerTemplate',
                            description: 'Send template-based WhatsApp messages',
                            action: 'Send template via notifyer',
                        },
                        {
                            name: 'Send Non Template Via Notifyer',
                            value: 'sendNonTemplateMessage',
                            description: 'Send non-template WhatsApp messages',
                            action: 'Send non template via notifyer',
                        },
                    ],
                    default: 'sendMessage',
                    required: true,
                },
                {
                    displayName: 'Recipient',
                    name: 'recipient',
                    type: 'string',
                    placeholder: 'Recipient phone number',
                    required: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendMessage'],
                        },
                    },
                    description: 'The phone number of the recipient in international format',
                    default: '',
                },
                {
                    displayName: 'Message',
                    name: 'message',
                    type: 'string',
                    placeholder: 'Your message here',
                    required: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendMessage'],
                        },
                    },
                    description: 'The text message to send',
                    typeOptions: {
                        rows: 4,
                    },
                    default: '',
                },
                {
                    displayName: 'Attachment URL',
                    name: 'attachment',
                    type: 'string',
                    default: '',
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendMessage'],
                        },
                    },
                    description: 'URL of an attachment to send (optional)',
                },
                {
                    displayName: 'Filename',
                    name: 'filename',
                    type: 'string',
                    default: '',
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendMessage'],
                        },
                    },
                    description: 'Filename for the attachment (optional)',
                },
                {
                    displayName: 'Recipient',
                    name: 'notifyerRecipient',
                    type: 'string',
                    required: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNotifyerTemplate'],
                        },
                    },
                    description: 'The phone number of the recipient in international format',
                    default: '',
                },
                {
                    displayName: 'Template Name or ID',
                    name: 'notifyerTemplate',
                    type: 'options',
                    typeOptions: {
                        loadOptionsMethod: 'getTemplates',
                    },
                    required: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNotifyerTemplate'],
                        },
                    },
                    description: 'The template to use. Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>.',
                    default: '',
                },
                {
                    displayName: 'Template Variables',
                    name: 'notifyerVariables',
                    type: 'resourceMapper',
                    noDataExpression: true,
                    default: {
                        mappingMode: 'defineBelow',
                        value: null,
                    },
                    required: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNotifyerTemplate'],
                        },
                    },
                    description: 'Variables for the template',
                    typeOptions: {
                        loadOptionsDependsOn: ['notifyerTemplate'],
                        resourceMapper: {
                            resourceMapperMethod: 'getTemplateVariables',
                            mode: 'add',
                            fieldWords: {
                                singular: 'variable',
                                plural: 'variables',
                            },
                            addAllFields: true,
                            multiKeyMatch: false,
                            supportAutoMap: false,
                        },
                    },
                },
                {
                    displayName: 'Note',
                    name: 'templateNote',
                    type: 'string',
                    default: '',
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNotifyerTemplate'],
                        },
                    },
                    description: 'Optional note to add to the template message',
                    typeOptions: {
                        rows: 2,
                    },
                },
                {
                    displayName: 'Label Names or IDs',
                    name: 'templateLabels',
                    type: 'multiOptions',
                    default: [],
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNotifyerTemplate'],
                        },
                    },
                    description: 'Choose from the list, or specify IDs using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>',
                    typeOptions: {
                        loadOptionsMethod: 'getLabels',
                    },
                },
                {
                    displayName: 'Schedule Message',
                    name: 'scheduleTemplateMessage',
                    type: 'boolean',
                    default: false,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNotifyerTemplate'],
                        },
                    },
                    description: 'Whether to schedule the message for later delivery',
                },
                {
                    displayName: 'Scheduled Date and Time',
                    name: 'templateScheduledDateTime',
                    type: 'dateTime',
                    required: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNotifyerTemplate'],
                            scheduleTemplateMessage: [true],
                        },
                    },
                    description: 'The date and time when the message should be sent',
                    default: '',
                },
                {
                    displayName: 'Timezone',
                    name: 'templateTimezone',
                    type: 'options',
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNotifyerTemplate'],
                            scheduleTemplateMessage: [true],
                        },
                    },
                    options: timezones_1.WHATSAPP_TIMEZONES,
                    default: '',
                    description: 'Timezone for the scheduled date and time',
                },
                {
                    displayName: 'Recipient Name or ID',
                    name: 'whatsableTo',
                    type: 'options',
                    typeOptions: {
                        loadOptionsMethod: 'getWhatsAppNumbers',
                    },
                    required: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendWhatsableMessage'],
                        },
                    },
                    description: 'Select a WhatsApp number to send from. Choose from the list, or specify an ID using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>.',
                    default: '',
                },
                {
                    displayName: 'Text',
                    name: 'whatsableText',
                    type: 'string',
                    required: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendWhatsableMessage'],
                        },
                    },
                    description: 'Message text content',
                    typeOptions: {
                        rows: 4,
                    },
                    default: '',
                },
                {
                    displayName: 'Attachment URL',
                    name: 'whatsableAttachment',
                    type: 'string',
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendWhatsableMessage'],
                        },
                    },
                    description: 'URL of an attachment to send',
                    default: '',
                },
                {
                    displayName: 'Filename',
                    name: 'whatsableFilename',
                    type: 'string',
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendWhatsableMessage'],
                        },
                    },
                    description: 'Filename for the attachment',
                    default: '',
                },
                {
                    displayName: 'Recipient Phone Number',
                    name: 'nonTemplateRecipient',
                    type: 'string',
                    required: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                        },
                    },
                    description: 'The phone number of the recipient in international format',
                    default: '',
                },
                {
                    displayName: 'Message Type',
                    name: 'messageType',
                    type: 'options',
                    required: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                        },
                    },
                    options: [
                        {
                            name: 'Audio Message',
                            value: 'audio',
                        },
                        {
                            name: 'Document Message',
                            value: 'document',
                        },
                        {
                            name: 'Image Message',
                            value: 'image',
                        },
                        {
                            name: 'Text Message',
                            value: 'text',
                        },
                        {
                            name: 'Video Message',
                            value: 'video',
                        },
                    ],
                    default: 'text',
                    description: 'Type of message to send',
                },
                {
                    displayName: 'Enable Link Preview',
                    name: 'enableLinkPreview',
                    type: 'boolean',
                    default: false,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                            messageType: ['text'],
                        },
                    },
                    description: 'Whether to enable link preview for text messages containing URLs',
                },
                {
                    displayName: 'Document URL',
                    name: 'documentUrl',
                    type: 'string',
                    required: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                            messageType: ['document'],
                        },
                    },
                    description: 'URL of the document to send',
                    default: '',
                },
                {
                    displayName: 'Caption',
                    name: 'documentCaption',
                    type: 'string',
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                            messageType: ['document'],
                        },
                    },
                    description: 'Optional caption for the document',
                    default: '',
                },
                {
                    displayName: 'Filename',
                    name: 'documentFilename',
                    type: 'string',
                    required: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                            messageType: ['document'],
                        },
                    },
                    description: 'Filename for the document',
                    default: '',
                },
                {
                    displayName: 'Preview URL',
                    name: 'documentPreviewUrl',
                    type: 'boolean',
                    default: false,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                            messageType: ['document'],
                        },
                    },
                    description: 'Whether to enable URL preview for document',
                },
                {
                    displayName: 'Image URL',
                    name: 'imageUrl',
                    type: 'string',
                    required: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                            messageType: ['image'],
                        },
                    },
                    description: 'URL of the image to send',
                    default: '',
                },
                {
                    displayName: 'Caption',
                    name: 'imageCaption',
                    type: 'string',
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                            messageType: ['image'],
                        },
                    },
                    description: 'Optional caption for the image',
                    default: '',
                },
                {
                    displayName: 'Preview URL',
                    name: 'previewUrl',
                    type: 'boolean',
                    default: false,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                            messageType: ['image'],
                        },
                    },
                    description: 'Whether to enable URL preview for image',
                },
                {
                    displayName: 'Video URL',
                    name: 'videoUrl',
                    type: 'string',
                    required: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                            messageType: ['video'],
                        },
                    },
                    description: 'URL of the video to send',
                    default: '',
                },
                {
                    displayName: 'Caption',
                    name: 'videoCaption',
                    type: 'string',
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                            messageType: ['video'],
                        },
                    },
                    description: 'Optional caption for the video',
                    default: '',
                },
                {
                    displayName: 'Preview URL',
                    name: 'videoPreviewUrl',
                    type: 'boolean',
                    default: false,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                            messageType: ['video'],
                        },
                    },
                    description: 'Whether to enable URL preview for video',
                },
                {
                    displayName: 'Audio URL',
                    name: 'audioUrl',
                    type: 'string',
                    required: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                            messageType: ['audio'],
                        },
                    },
                    description: 'URL of the audio to send',
                    default: '',
                },
                {
                    displayName: 'Preview URL',
                    name: 'audioPreviewUrl',
                    type: 'boolean',
                    default: false,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                            messageType: ['audio'],
                        },
                    },
                    description: 'Whether to enable URL preview for audio',
                },
                {
                    displayName: 'Message Content',
                    name: 'messageContent',
                    type: 'string',
                    required: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                            messageType: ['text'],
                        },
                    },
                    description: 'The content of the message (text or URL depending on message type)',
                    default: '',
                },
                {
                    displayName: 'Label Names or IDs',
                    name: 'nonTemplateLabels',
                    type: 'multiOptions',
                    default: [],
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                        },
                    },
                    description: 'Choose from the list, or specify IDs using an <a href="https://docs.n8n.io/code-examples/expressions/">expression</a>',
                    typeOptions: {
                        loadOptionsMethod: 'getLabels',
                    },
                },
                {
                    displayName: 'Schedule Message',
                    name: 'scheduleNonTemplateMessage',
                    type: 'boolean',
                    default: false,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                        },
                    },
                    description: 'Whether to schedule the message for later delivery',
                },
                {
                    displayName: 'Scheduled Date and Time',
                    name: 'nonTemplateScheduledDateTime',
                    type: 'dateTime',
                    required: true,
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                            scheduleNonTemplateMessage: [true],
                        },
                    },
                    description: 'The date and time when the message should be sent',
                    default: '',
                },
                {
                    displayName: 'Timezone',
                    name: 'nonTemplateTimezone',
                    type: 'options',
                    displayOptions: {
                        show: {
                            resource: ['sendMessage'],
                            operation: ['sendNonTemplateMessage'],
                            scheduleNonTemplateMessage: [true],
                        },
                    },
                    options: timezones_1.WHATSAPP_TIMEZONES,
                    default: '',
                    description: 'Timezone for the scheduled date and time',
                },
                {
                    displayName: 'Detected Product',
                    name: 'detectedProduct',
                    type: 'hidden',
                    default: '',
                },
                {
                    displayName: 'User ID',
                    name: 'userId',
                    type: 'hidden',
                    default: '',
                },
            ],
        };
        this.methods = {
            loadOptions: {
                async getTemplates() {
                    const returnData = [];
                    try {
                        const templatesOptions = {
                            method: 'GET',
                            baseURL: BASE_URLS.NOTIFYER,
                            url: `/n8n-templates`,
                            headers: {
                                'Accept': 'application/json',
                            },
                        };
                        const response = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', templatesOptions);
                        if (Array.isArray(response)) {
                            for (const template of response) {
                                returnData.push({
                                    name: template.name || template.id,
                                    description: template.type ? `Type: ${template.type}, Language: ${template.language || 'Unknown'}, Variables: ${template.variable_counts || 0}` : '',
                                    value: JSON.stringify({
                                        template_id: template.template_id || template.id,
                                        variable_counts: template.variable_counts || 0,
                                        template_formate: template.template_formate,
                                        components: template.components,
                                    })
                                });
                            }
                        }
                        else {
                            returnData.push({
                                name: 'No templates found',
                                value: 'notfound',
                                description: 'No templates were found for this user',
                            });
                        }
                    }
                    catch (error) {
                        returnData.push({
                            name: `Error: ${error.message}`,
                            value: 'error',
                            description: 'Failed to load templates',
                        });
                    }
                    return returnData;
                },
                async getWhatsAppNumbers() {
                    const returnData = [];
                    try {
                        const numbersOptions = {
                            method: 'GET',
                            baseURL: BASE_URLS.VALIDATION,
                            url: `/get-whatsable-numbers`,
                            headers: {
                                'Accept': 'application/json',
                            },
                        };
                        const response = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', numbersOptions);
                        if (Array.isArray(response)) {
                            for (const number of response) {
                                if (number.phone_number) {
                                    returnData.push({
                                        name: number.phone_number,
                                        value: number.phone_number,
                                        description: 'WhatsApp number',
                                    });
                                }
                            }
                        }
                        else {
                            returnData.push({
                                name: 'No numbers found',
                                value: 'notfound',
                                description: 'No WhatsApp numbers were found for this user',
                            });
                        }
                    }
                    catch (error) {
                        returnData.push({
                            name: `Error: ${error.message}`,
                            value: 'error',
                            description: 'Failed to load WhatsApp numbers',
                        });
                    }
                    return returnData;
                },
                async getLabels() {
                    const returnData = [];
                    try {
                        const labelsOptions = {
                            method: 'GET',
                            baseURL: BASE_URLS.NOTIFYER,
                            url: `/n8n/label`,
                            headers: {
                                'Accept': 'application/json',
                            },
                        };
                        const response = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', labelsOptions);
                        if (Array.isArray(response)) {
                            for (const label of response) {
                                if (label.label) {
                                    returnData.push({
                                        name: label.label,
                                        value: label.label,
                                        description: 'Label',
                                    });
                                }
                            }
                        }
                        else {
                            returnData.push({
                                name: 'No labels found',
                                value: 'notfound',
                                description: 'No labels were found for this user',
                            });
                        }
                    }
                    catch (error) {
                        returnData.push({
                            name: `Error: ${error.message}`,
                            value: 'error',
                            description: 'Failed to load labels',
                        });
                    }
                    return returnData;
                },
            },
            resourceMapping: {
                getTemplateVariables,
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        let validationSuccessful;
        let validationMessage;
        try {
            const validationOptions = {
                method: 'GET',
                baseURL: BASE_URLS.VALIDATION,
                url: `/check-api-key-across-projects`,
                headers: {
                    'Accept': 'application/json',
                },
            };
            const validationResponse = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', validationOptions);
            validationSuccessful = validationResponse.success;
            validationMessage = validationResponse.message;
            if (!validationSuccessful) {
                throw new n8n_workflow_1.NodeApiError(this.getNode(), { message: `API key validation failed: ${validationMessage}` });
            }
        }
        catch (error) {
            throw new n8n_workflow_1.NodeOperationError(this.getNode(), `API key validation failed: ${error.message}`);
        }
        for (let i = 0; i < items.length; i++) {
            try {
                const operation = this.getNodeParameter('operation', i);
                let response;
                if (operation === 'sendMessage') {
                    const recipient = this.getNodeParameter('recipient', i);
                    const message = this.getNodeParameter('message', i);
                    const attachment = this.getNodeParameter('attachment', i, '');
                    const filename = this.getNodeParameter('filename', i, '');
                    const options = {
                        method: 'POST',
                        baseURL: BASE_URLS.NOTIFIER,
                        url: '/n8n/send-message',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                        },
                        body: {
                            phone: recipient,
                            text: message,
                            attachment: attachment,
                            filename: filename,
                        },
                    };
                    response = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', options);
                }
                else if (operation === 'sendNotifyerTemplate') {
                    const recipient = this.getNodeParameter('notifyerRecipient', i);
                    const templateId = this.getNodeParameter('notifyerTemplate', i);
                    const variablesObj = this.getNodeParameter('notifyerVariables', i);
                    const scheduleMessage = this.getNodeParameter('scheduleTemplateMessage', i, false);
                    const note = this.getNodeParameter('templateNote', i, '');
                    const labels = this.getNodeParameter('templateLabels', i, []);
                    const templateData = JSON.parse(templateId);
                    const variables = {};
                    const templateComponents = templateData.components.components;
                    const hasMediaHeader = templateComponents.some((c) => c.type === 'HEADER' && c.format !== 'TEXT');
                    const hasUrlButton = templateComponents.some((c) => c.type === 'BUTTONS' && c.buttons && c.buttons.some((b) => b.type === 'URL'));
                    Object.entries(variablesObj.value).forEach(([key, value]) => {
                        if (key === 'media' && hasMediaHeader) {
                            variables['media'] = value;
                        }
                        else if (key === 'visit_website' && hasUrlButton) {
                            variables['visit_website'] = value;
                        }
                        else if (key.startsWith('body')) {
                            variables[key] = value;
                        }
                    });
                    if (scheduleMessage) {
                        const scheduledDateTime = this.getNodeParameter('templateScheduledDateTime', i);
                        const timezone = this.getNodeParameter('templateTimezone', i);
                        const formattedDate = new Date(scheduledDateTime).toISOString();
                        const scheduleRequestBody = {
                            template: templateData.template_id,
                            time_zone: timezone,
                            variables: variables,
                            is_schedule: true,
                            phone_number: recipient,
                            schedule_datetime_date: formattedDate,
                            note: note,
                            labels: labels,
                        };
                        const options = {
                            method: 'POST',
                            baseURL: BASE_URLS.NOTIFYER,
                            url: '/n8n/send-message',
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json',
                            },
                            body: scheduleRequestBody,
                        };
                        response = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', options);
                    }
                    else {
                        const requestBody = {
                            template: templateData.template_id,
                            variables: variables,
                            phone_number: recipient,
                            note: note,
                            labels: labels,
                        };
                        const options = {
                            method: 'POST',
                            baseURL: BASE_URLS.NOTIFYER,
                            url: '/n8n/send-message',
                            headers: {
                                'Content-Type': 'application/json',
                                'Accept': 'application/json',
                            },
                            body: requestBody,
                        };
                        response = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', options);
                    }
                }
                else if (operation === 'sendNonTemplateMessage') {
                    const recipient = this.getNodeParameter('nonTemplateRecipient', i);
                    const messageType = this.getNodeParameter('messageType', i);
                    const scheduleMessage = this.getNodeParameter('scheduleNonTemplateMessage', i, false);
                    const labels = this.getNodeParameter('nonTemplateLabels', i, []);
                    let scheduledTime = '';
                    let timezone = '';
                    if (scheduleMessage) {
                        scheduledTime = this.getNodeParameter('nonTemplateScheduledDateTime', i);
                        timezone = this.getNodeParameter('nonTemplateTimezone', i);
                        scheduledTime = new Date(scheduledTime).toISOString();
                    }
                    if (messageType === 'text') {
                        const messageContent = this.getNodeParameter('messageContent', i);
                        const enableLinkPreview = this.getNodeParameter('enableLinkPreview', i, false);
                        if (scheduleMessage) {
                            const scheduleRequestBody = {
                                to: recipient,
                                text: {
                                    body: messageContent,
                                    preview_url: enableLinkPreview
                                },
                                type: "text",
                                time_zone: timezone,
                                is_schedule: true,
                                recipient_type: "individual",
                                messaging_product: "whatsapp",
                                schedule_datetime_date: scheduledTime,
                                labels: labels,
                            };
                            const options = {
                                method: 'POST',
                                baseURL: BASE_URLS.NOTIFYER,
                                url: '/n8n/general/send-message',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/json',
                                },
                                body: scheduleRequestBody,
                                returnFullResponse: true,
                            };
                            response = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', options);
                        }
                        else {
                            const requestBody = {
                                to: recipient,
                                text: {
                                    body: messageContent,
                                    preview_url: enableLinkPreview
                                },
                                type: "text",
                                recipient_type: "individual",
                                messaging_product: "whatsapp",
                                labels: labels,
                            };
                            const options = {
                                method: 'POST',
                                baseURL: BASE_URLS.NOTIFYER,
                                url: '/n8n/general/send-message',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/json',
                                },
                                body: requestBody,
                                returnFullResponse: true,
                            };
                            response = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', options);
                        }
                    }
                    else if (messageType === 'document') {
                        const documentUrl = this.getNodeParameter('documentUrl', i);
                        const documentCaption = this.getNodeParameter('documentCaption', i, '');
                        const documentFilename = this.getNodeParameter('documentFilename', i);
                        if (scheduleMessage) {
                            const scheduleRequestBody = {
                                to: recipient,
                                document: {
                                    link: documentUrl,
                                    caption: documentCaption,
                                    filename: documentFilename
                                },
                                type: "document",
                                time_zone: timezone,
                                is_schedule: true,
                                recipient_type: "individual",
                                messaging_product: "whatsapp",
                                schedule_datetime_date: scheduledTime,
                                labels: labels,
                            };
                            const options = {
                                method: 'POST',
                                baseURL: BASE_URLS.NOTIFYER,
                                url: '/n8n/general/send-message',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/json',
                                },
                                body: scheduleRequestBody,
                                returnFullResponse: true,
                            };
                            response = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', options);
                        }
                        else {
                            const requestBody = {
                                to: recipient,
                                type: "document",
                                document: {
                                    link: documentUrl,
                                    caption: documentCaption,
                                    filename: documentFilename
                                },
                                recipient_type: "individual",
                                messaging_product: "whatsapp",
                                labels: labels,
                            };
                            const options = {
                                method: 'POST',
                                baseURL: BASE_URLS.NOTIFYER,
                                url: '/n8n/general/send-message',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/json',
                                },
                                body: requestBody,
                                returnFullResponse: true,
                            };
                            response = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', options);
                        }
                    }
                    else if (messageType === 'image') {
                        const imageUrl = this.getNodeParameter('imageUrl', i);
                        const imageCaption = this.getNodeParameter('imageCaption', i, '');
                        if (scheduleMessage) {
                            const scheduleRequestBody = {
                                to: recipient,
                                image: {
                                    link: imageUrl,
                                    caption: imageCaption
                                },
                                type: "image",
                                time_zone: timezone,
                                is_schedule: true,
                                recipient_type: "individual",
                                messaging_product: "whatsapp",
                                schedule_datetime_date: scheduledTime,
                                labels: labels,
                            };
                            const options = {
                                method: 'POST',
                                baseURL: BASE_URLS.NOTIFYER,
                                url: '/n8n/general/send-message',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/json',
                                },
                                body: scheduleRequestBody,
                                returnFullResponse: true,
                            };
                            response = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', options);
                        }
                        else {
                            const requestBody = {
                                to: recipient,
                                type: "image",
                                image: {
                                    link: imageUrl,
                                    caption: imageCaption
                                },
                                recipient_type: "individual",
                                messaging_product: "whatsapp",
                                labels: labels,
                            };
                            const options = {
                                method: 'POST',
                                baseURL: BASE_URLS.NOTIFYER,
                                url: '/n8n/general/send-message',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/json',
                                },
                                body: requestBody,
                                returnFullResponse: true,
                            };
                            response = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', options);
                        }
                    }
                    else if (messageType === 'video') {
                        const videoUrl = this.getNodeParameter('videoUrl', i);
                        const videoCaption = this.getNodeParameter('videoCaption', i, '');
                        if (scheduleMessage) {
                            const scheduleRequestBody = {
                                to: recipient,
                                video: {
                                    link: videoUrl,
                                    caption: videoCaption
                                },
                                type: "video",
                                time_zone: timezone,
                                is_schedule: true,
                                recipient_type: "individual",
                                messaging_product: "whatsapp",
                                schedule_datetime_date: scheduledTime,
                                labels: labels,
                            };
                            const options = {
                                method: 'POST',
                                baseURL: BASE_URLS.NOTIFYER,
                                url: '/n8n/general/send-message',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/json',
                                },
                                body: scheduleRequestBody,
                                returnFullResponse: true,
                            };
                            response = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', options);
                        }
                        else {
                            const requestBody = {
                                to: recipient,
                                type: "video",
                                video: {
                                    link: videoUrl,
                                    caption: videoCaption
                                },
                                recipient_type: "individual",
                                messaging_product: "whatsapp",
                                labels: labels,
                            };
                            const options = {
                                method: 'POST',
                                baseURL: BASE_URLS.NOTIFYER,
                                url: '/n8n/general/send-message',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/json',
                                },
                                body: requestBody,
                                returnFullResponse: true,
                            };
                            response = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', options);
                        }
                    }
                    else if (messageType === 'audio') {
                        const audioUrl = this.getNodeParameter('audioUrl', i);
                        if (scheduleMessage) {
                            const scheduleRequestBody = {
                                to: recipient,
                                audio: {
                                    link: audioUrl
                                },
                                type: "audio",
                                time_zone: timezone,
                                is_schedule: true,
                                recipient_type: "individual",
                                messaging_product: "whatsapp",
                                schedule_datetime_date: scheduledTime,
                                labels: labels,
                            };
                            const options = {
                                method: 'POST',
                                baseURL: BASE_URLS.NOTIFYER,
                                url: '/n8n/general/send-message',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/json',
                                },
                                body: scheduleRequestBody,
                                returnFullResponse: true,
                            };
                            response = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', options);
                        }
                        else {
                            const requestBody = {
                                to: recipient,
                                type: "audio",
                                audio: {
                                    link: audioUrl
                                },
                                recipient_type: "individual",
                                messaging_product: "whatsapp",
                                labels: labels,
                            };
                            const options = {
                                method: 'POST',
                                baseURL: BASE_URLS.NOTIFYER,
                                url: '/n8n/general/send-message',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/json',
                                },
                                body: requestBody,
                                returnFullResponse: true,
                            };
                            response = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', options);
                        }
                    }
                }
                else if (operation === 'sendWhatsableMessage') {
                    const to = this.getNodeParameter('whatsableTo', i);
                    const text = this.getNodeParameter('whatsableText', i);
                    const attachment = this.getNodeParameter('whatsableAttachment', i, '');
                    const filename = this.getNodeParameter('whatsableFilename', i, '');
                    const options = {
                        method: 'POST',
                        baseURL: BASE_URLS.WHATSABLE,
                        url: '/whatsable-send-message',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                        },
                        body: {
                            to: to,
                            text: text,
                            attachment: attachment,
                            filename: filename,
                        },
                    };
                    response = await this.helpers.httpRequestWithAuthentication.call(this, 'whatsAbleApi', options);
                }
                else {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), `Operation ${operation} is not supported`);
                }
                returnData.push({
                    json: response || { success: false, message: 'Operation not implemented' },
                    pairedItem: { item: i },
                });
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({
                        json: {
                            error: error.message,
                        },
                        pairedItem: { item: i },
                    });
                    continue;
                }
                throw new n8n_workflow_1.NodeOperationError(this.getNode(), error, { itemIndex: i });
            }
        }
        return [returnData];
    }
}
exports.WhatsAble = WhatsAble;
async function getTemplateVariables() {
    const returnData = {
        fields: [],
    };
    try {
        const templateValue = this.getNodeParameter('notifyerTemplate');
        if (!templateValue || templateValue === 'notfound' || templateValue === 'error') {
            return returnData;
        }
        const templateData = JSON.parse(templateValue);
        const bodyComponent = templateData.components.components.find((c) => c.type === 'BODY');
        let bodyVariableCount = 0;
        if (bodyComponent && bodyComponent.text) {
            const variableMatches = bodyComponent.text.match(/\{\{\d+\}\}/g) || [];
            bodyVariableCount = variableMatches.length;
        }
        for (let i = 1; i <= bodyVariableCount; i++) {
            let exampleText = `Variable ${i}`;
            if (bodyComponent && bodyComponent.example && bodyComponent.example.body_text && bodyComponent.example.body_text[0] && bodyComponent.example.body_text[0][i - 1]) {
                exampleText = bodyComponent.example.body_text[0][i - 1];
            }
            returnData.fields.push({
                id: `body${i}`,
                displayName: `Body ${i}. Example: ${exampleText}`,
                defaultMatch: true,
                canBeUsedToMatch: true,
                required: true,
                display: true,
                type: 'string'
            });
        }
        templateData.components.components.forEach((component) => {
            if (component.type === 'BUTTONS') {
                const urlButton = component.buttons && component.buttons.find((button) => button.type === 'URL');
                if (urlButton && urlButton.url && urlButton.url.includes('{{')) {
                    let exampleUrl = urlButton.url.replace(/\{\{\d+\}\}/g, 'your-value');
                    returnData.fields.push({
                        id: "visit_website",
                        displayName: `Visit Website URL. Example: ${exampleUrl}`,
                        defaultMatch: true,
                        canBeUsedToMatch: true,
                        required: true,
                        display: true,
                        type: 'string'
                    });
                }
            }
        });
        templateData.components.components.forEach((component) => {
            if (component.type === 'HEADER' && component.format !== 'TEXT') {
                returnData.fields.push({
                    id: "media",
                    displayName: `Media (${component.format}). Example: Enter media URL`,
                    defaultMatch: true,
                    canBeUsedToMatch: true,
                    required: true,
                    display: true,
                    type: 'string'
                });
            }
        });
    }
    catch (error) {
        return returnData;
    }
    return returnData;
}
//# sourceMappingURL=WhatsAble.node.js.map